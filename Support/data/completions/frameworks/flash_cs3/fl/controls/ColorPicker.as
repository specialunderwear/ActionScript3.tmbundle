package fl.controls
{
import fl.core.UIComponent;
import fl.core.InvalidationType;
import fl.controls.BaseButton;
import fl.controls.TextInput;
import fl.controls.TextArea;
import fl.events.ComponentEvent;
import fl.events.ColorPickerEvent;
import fl.managers.IFocusManager;
import fl.managers.IFocusManagerComponent;
import flash.events.MouseEvent;
import flash.events.Event;
import flash.events.KeyboardEvent;
import flash.events.FocusEvent;
import flash.display.DisplayObject;
import flash.display.Graphics;
import flash.display.Sprite;
import flash.geom.ColorTransform;
import flash.geom.Point;
import flash.geom.Rectangle;
import flash.text.TextField;
import flash.text.TextFieldType;
import flash.text.TextFormat;
import flash.ui.Keyboard;
import flash.system.IME;
public class ColorPicker extends UIComponent implements IFocusManagerComponent
{
		public var textField : TextField;
		protected var customColors : Array;
		public static var defaultColors : Array;
		protected var colorHash : Object;
		protected var paletteBG : DisplayObject;
		protected var selectedSwatch : Sprite;
		protected var _selectedColor : uint;
		protected var rollOverColor : int;
		protected var _editable : Boolean;
		protected var _showTextField : Boolean;
		protected var isOpen : Boolean;
		protected var doOpen : Boolean;
		protected var swatchButton : BaseButton;
		protected var colorWell : DisplayObject;
		protected var swatchSelectedSkin : DisplayObject;
		protected var palette : Sprite;
		protected var textFieldBG : DisplayObject;
		protected var swatches : Sprite;
		protected var swatchMap : Array;
		protected var currRowIndex : int;
		protected var currColIndex : int;
		private static var defaultStyles : Object;
		protected static const POPUP_BUTTON_STYLES : Object;
		protected static const SWATCH_STYLES : Object;
		public function get selectedColor () : uint;
		public function set selectedColor (value:uint) : Void;
		public function get hexValue () : String;
		public function get enabled () : Boolean;
		public function set enabled (value:Boolean) : Void;
		public function get editable () : Boolean;
		public function set editable (value:Boolean) : Void;
		public function get showTextField () : Boolean;
		public function set showTextField (value:Boolean) : Void;
		public function get colors () : Array;
		public function set colors (value:Array) : Void;
		public function get imeMode () : String;
		public function set imeMode (value:String) : Void;
		public static function getStyleDefinition () : Object;
		public function ColorPicker ();
		public function open () : void;
		public function close () : void;
		private function addCloseListener (event:Event);
		protected function onStageClick (event:MouseEvent) : void;
		protected function setStyles () : void;
		protected function cleanUpSelected () : void;
		protected function onPopupButtonClick (event:MouseEvent) : void;
		protected function draw () : void;
		protected function showPalette () : void;
		protected function setEmbedFonts () : void;
		protected function drawSwatchHighlight () : void;
		protected function drawPalette () : void;
		protected function drawTextField () : void;
		protected function drawSwatches () : void;
		protected function drawBG () : void;
		protected function positionPalette () : void;
		protected function setTextEditable () : void;
		protected function keyUpHandler (event:KeyboardEvent) : void;
		protected function positionTextField () : void;
		protected function setColorDisplay () : void;
		protected function setSwatchHighlight (swatch:Sprite) : void;
		protected function findSwatch (color:uint) : Sprite;
		protected function onSwatchClick (event:MouseEvent) : void;
		protected function onSwatchOver (event:MouseEvent) : void;
		protected function onSwatchOut (event:MouseEvent) : void;
		protected function setColorText (color:uint) : void;
		protected function colorToString (color:uint) : String;
		protected function setColorWellColor (colorTransform:ColorTransform) : void;
		protected function createSwatch (color:uint) : Sprite;
		protected function addStageListener (event:Event = null) : void;
		protected function removeStageListener (event:Event = null) : void;
		protected function focusInHandler (event:FocusEvent) : void;
		protected function focusOutHandler (event:FocusEvent) : void;
		protected function isOurFocus (target:DisplayObject) : Boolean;
		protected function keyDownHandler (event:KeyboardEvent) : void;
		protected function configUI () : void;
}
}
