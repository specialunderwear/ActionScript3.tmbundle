package fl.video
{
import flash.net.*;
import flash.events.TimerEvent;
import flash.events.NetStatusEvent;
import flash.utils.Timer;
public class NCManager implements INCManager
{
		internal var _owner : VideoPlayer;
		internal var _contentPath : String;
		internal var _protocol : String;
		internal var _serverName : String;
		internal var _portNumber : String;
		internal var _wrappedURL : String;
		internal var _appName : String;
		internal var _streamName : String;
		internal var _streamLength : Number;
		internal var _streamWidth : int;
		internal var _streamHeight : int;
		internal var _streams : Array;
		internal var _isRTMP : Boolean;
		internal var _smilMgr : SMILManager;
		internal var _fpadMgr : FPADManager;
		internal var _fpadZone : Number;
		internal var _objectEncoding : uint;
		internal var _proxyType : String;
		internal var _bitrate : Number;
		public var fallbackServerName : String;
		internal var _timeoutTimer : Timer;
		public const DEFAULT_TIMEOUT : uint;
		internal var _payload : Number;
		internal var _autoSenseBW : Boolean;
		internal var _nc : NetConnection;
		internal var _ncUri : String;
		internal var _ncConnected : Boolean;
		internal var _tryNC : Array;
		internal var _tryNCTimer : Timer;
		internal static const RTMP_CONN : Array;
		internal var _connTypeCounter : uint;
		public function get timeout () : uint;
		public function set timeout (t:uint) : Void;
		public function get bitrate () : Number;
		public function set bitrate (b:Number) : Void;
		public function get videoPlayer () : VideoPlayer;
		public function set videoPlayer (v:VideoPlayer) : Void;
		public function get netConnection () : NetConnection;
		public function get streamName () : String;
		public function get isRTMP () : Boolean;
		public function get streamLength () : Number;
		public function get streamWidth () : int;
		public function get streamHeight () : int;
		public function NCManager ();
		internal function initNCInfo () : void;
		internal function initOtherInfo () : void;
		public function getProperty (propertyName:String) : *;
		public function setProperty (propertyName:String, value:*) : void;
		public function connectToURL (url:String) : Boolean;
		public function connectAgain () : Boolean;
		public function reconnect () : void;
		internal function onReconnected () : void;
		public function close () : void;
		public function helperDone (helper:Object, success:Boolean) : void;
		internal function bitrateMatch () : void;
		internal function parseURL (url:String) : ParseResults;
		internal function canReuseOldConnection (parseResults:ParseResults) : Boolean;
		internal function connectHTTP () : Boolean;
		internal function connectRTMP () : Boolean;
		internal function connectFPAD (url:String) : Boolean;
		internal function nextConnect (e:TimerEvent =null) : void;
		internal function cleanConns () : void;
		internal function tryFallBack () : void;
		internal function onConnected (p_nc:NetConnection, p_bw:Number) : void;
		internal function connectOnStatus (e:NetStatusEvent) : void;
		internal function reconnectOnStatus (e:NetStatusEvent) : void;
		internal function disconnectOnStatus (e:NetStatusEvent) : void;
		internal function getStreamLengthResult (length:Number) : void;
		internal function _onFMSConnectTimeOut (e:TimerEvent =null) : void;
		internal static function stripFrontAndBackWhiteSpace (p_str:String) : String;
}
}
