<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wKU

require ENV['TM_BUNDLE_SUPPORT']+'/lib/flex_env'
word = ENV['TM_CURRENT_WORD']
project = "#{ENV['TM_PROJECT_DIRECTORY']}"

file = STDIN.read.strip

p = PropertyInspector.property_chain

#FlexMate::Log.puts("property_chain: " + p.join('------') )

w = ClassParser.new

paths = w.path_list(file, p)

#FlexMate::Log.puts("paths: " + paths.join("\n"))

existing_paths = []

paths.each do |path|
	if File.exists? "#{project}/#{path}"
		existing_paths &lt;&lt; path
	end
end

if existing_paths.empty?
	TextMate.exit_show_tool_tip("no such class found #{word}")
elsif existing_paths.size == 1
	filename = existing_paths[0]
else
	FlexMate::Log.puts('it is more then one item')
	
	i = TextMate::UI.menu(existing_paths)
	TextMate.exit_discard() if i == nil
	filename = existing_paths[i]
end

FlexMate::Log.puts("#{project}/#{filename}")

if File.exists? "#{project}/#{filename}"
	TextMate.go_to :file =&gt; "#{project}/#{filename}"
else
	TextMate.exit_show_tool_tip("no such file found #{project}/#{filename}")
end
</string>
	<key>fallbackInput</key>
	<string>document</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@D</string>
	<key>name</key>
	<string>Open Class</string>
	<key>output</key>
	<string>discard</string>
	<key>scope</key>
	<string>meta.class.actionscript.3</string>
	<key>uuid</key>
	<string>ED2E88FE-5D8A-4251-B811-1C179C97A555</string>
</dict>
</plist>
