<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

require ENV['TM_BUNDLE_SUPPORT']+'/lib/snip_env'
require ENV['TM_BUNDLE_SUPPORT']+'/lib/c_env'

line_number = ENV['TM_LINE_NUMBER'].to_i
doc = STDIN.read
doc_a = doc.split("\n")
next_line = doc_a[line_number].to_s

class_regexp = /\b(class|interface)\b/
constructor_regexp = /public\s+function\s+([A-Z]\w+)\s*\(.*\)\s*$/
override_regexp = /override.*function.*\(/
method_regex = /(public|private|protected|static|\s)+function\s+(\w+)\s*\(/

def scan_for_method(doc,name)
	m_rgx = /^(static|override|\s)*(public|private|protected)(static|\s)+function\s+\b#{name}\b\s*\(((?m:[^)]*))\)\s*:\s*(\w+)/
	doc.scan( m_rgx )
	if $2 != nil
		returns = "#{$5}"
		namespace = "#{$2}"
		params = $4.gsub(/(\s|\n)/,'') if $4 != nil
	end
	{:params =&gt; params, :returns =&gt; returns, :namespace =&gt; namespace }
end

def generate_method_doc(sig)
	args = (sig[:params]) ? sig[:params].split(',') : []
	
	puts "/**"
	puts " * @private" if sig[:namespace] != 'public'
	
	count = 1
	args.each { |e|
		arg =  e.split(':')
		puts " * @private" if arg.length != 2
		name = arg[0]
		type = arg[1].sub(/=.*$/,'')
		tab_stop = count &lt; 10 ? "${#{count}}" : ''
		puts " * @param #{name} #{type} #{tab_stop}"
		count += 1
	}
	
	if args.empty? and sig[:namespace] != 'private'
	 	tab_stop = count &lt; 10 ? "${#{count}}" : ''
	    puts " * #{tab_stop}"
		count += 1
	end
	
	unless sig[:returns] == 'void'
	  	tab_stop = count &lt; 10 ? "${#{count}}" : ''
	  	puts " * @return #{sig[:returns]} #{tab_stop}"
  end
	print " */\n"
end

t = SnippetBuilder.new

if next_line =~ class_regexp
	print t.class_doc().chomp
elsif next_line =~ constructor_regexp
	print t.doc("constructor").chomp
elsif next_line =~ override_regexp
	print t.doc("inheritDoc").chomp
elsif next_line =~ method_regex
	sig = scan_for_method(doc,$2)
	generate_method_doc(sig)
else
	print t.doc("private").chomp
end
</string>
	<key>input</key>
	<string>document</string>
	<key>name</key>
	<string>Documentation Block</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.actionscript.3</string>
	<key>tabTrigger</key>
	<string>doc</string>
	<key>uuid</key>
	<string>E9820D0D-76E8-43D2-901B-245087D74409</string>
</dict>
</plist>
